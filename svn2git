#!/usr/bin/env perl -w

# A reimplmentation of svn2git as a single file Perl program.

# This copied shamelessly from James Coglan's Ruby svn2git
# but I found the process of having to make a gem and all
# that too much work for what's basically a short script.

use Getopt::Long;

my %Opts;
GetOptions(
    \%Opts,
    "trunk:s", "branches:s", "tags:s", "authors:s",
    "clone!",
    "strip-tag-prefix:s",
    "verbose|v",
);

$Opts{clone} = 1 unless exists $Opts{clone};


=head1 NAME

svn2git - Convert SVN repositories to GIT

=head1 SYNOPSIS

    svn2git [--verbose|v]
            [--noclone]
            [--authors=AUTHORS_FILE]
            [--trunk=TRUNK_PATH] [--branches=BRANCHES_PATH] [--tags=TAGS_PATH]
            SVN_URL

=head1 DESCRIPTION

svn2git converts a Subversion project into a git repository.  It uses
git-svn to do the bulk of the conversion, but does a little extra work
to convert the Subversion way of doing things into the git way.

* Subversion tag branches become git tags.

* Local branches are made for each remote Subversion branch.

* master is assured to be trunk.

Once done, your new repository is ready to be used.  You can push it
to a new remote origin like so...

  git remote add origin <git_remote_url>
  git push origin --all
  git push origin --tags


=head2 Switches

=head3 --verbose

=head3 -v

If either -v or --verbose is given, svn2git will output each command
before it runs it.

=head3 --noclone

Skip the step of cloning the SVN repository.  This is useful when you
just want to convert the tags on a git repository you'd previously
cloned using git-svn.

=head3 --authors

The location of the authors file to use for the git-svn clone.  See
L<git-svn>'s -A option for details.

=head3 --trunk

=head3 --branches

=head3 --tags

These tell svn2git about the layout of your repository; what subdirs
contain the trunk, branches and tags respectively.  If none are given
a standard Subversion layout is assumed.

=head3 --strip-tag-prefix

strip tag name prefix.

  svn2git --strip-tag-prefix 'release-' http://svn.example.com/some-project

=head1 EXAMPLES

Convert a SVN project.

    svn2git http://svn.example.com/some-project

Convert the tags on an existing git-svn project

    cd some-git-svn-project
    svn2git --noclone


=head1 AUTHOR

Michael G Schwern <schwern@pobox.com>


=head1 SEE ALSO

L<git>, L<git-svn>

The original Ruby svn2git from which I took the idea.
L<http://github.com/jcoglan/svn2git/>


=cut


main(@ARGV);

sub main {
    my $url = shift;

    clone($url);

    git_sanity();
    fix_tags();
    fix_branches();
    fix_trunk();
}

sub run {
    print "@_\n" if $Opts{verbose};
    system @_;

    my $exit = $? >>8;
    die "@_ exited with $exit" if $exit;

    return 1;
}

sub clone {
    my $url = shift;
    return unless $Opts{clone};

    die "Usage: $0 [options] url\nperldoc $0 for documentation\n" unless $url;

    git_svn_sanity();

    print "Cloning svn repo at $url\n";

    my @clone = qw(git svn init --no-metadata);

    my @clone_opts;
    for my $opt (qw(trunk branches tags)) {
        push @clone_opts, "--$opt=$Opts{$opt}" if exists $Opts{$opt};
    }

    push @clone_opts, "-s" unless @clone_opts;

    run( @clone, @clone_opts, $url);
    run("git", "config", "svn.authorsfile", $Opts{authors}) if $Opts{authors};
    run("git", "svn", "fetch");

    return 1;
}

sub fix_tags {
    my $tags = $Opts{tags} || 'tags/';
    $tags .= '/' unless $tags =~ m{/$};
    my @branches = map { s/^\s+//; s/\s+$//; $_ } `git branch -a`;
    my @tags     = grep m{^\Q$tags/}, @branches;

    print "Turning tag branches into git tags\n";

    for my $branch (@tags) {
        my($tag) = $branch =~ m{^\Q$tags/(.*)};
        if (my $strip = $Opts{'strip-tag-prefix'}) {
            $tag =~ s{^$strip}{};
        }
        run("git", "checkout", $branch);
        run("git", "tag", $tag);
    }
}

sub fix_branches {
    my $tags = $Opts{tags} || 'tags/';
    $tags .= '/' unless $tags =~ m{/$};
    my @remotes = grep !m{^\Q$tags}, map { s/^\s+//; s/\s+$//; $_ } `git branch -r`;

    print "Turning remote branches into locals.\n";

    my $trunk = $Opts{trunk} || "trunk";
    for my $remote (@remotes) {
        next if $remote eq $trunk;

        run("git", "checkout", $remote);
        run("git", "checkout", "-b", $remote);
    }
}

sub fix_trunk {
    my $trunk = $Opts{trunk} || "trunk";

    return unless grep /^\s*\Q$trunk\E\s*/, `git branch -r`;

    print "Making sure master is trunk.\n";

    run("git", "branch", "-D", "master");
    run("git", "checkout", $trunk);
    run("git", "checkout", "-f", "-b", "master");
}


sub git_sanity {
    `git --version`;
    die "git --version didn't work.  Is git installed?\n" if $?;
}


sub git_svn_sanity {
    `git svn --version`;
    die "git svn --version didn't work.  Is git-svn installed?\n" if $?;
}
